---
layout: post
title:  "That's Not Very Flexible!"
date:   2017-11-13 13:00:00 +0100
poster: nidawi
comments: true
thumbnail: /assets/img/posts/flexibility.jpg
categories: 1dv022
---
In this post, we'll take a look at Static Site Generators (such as Jekyll): what they are, what I think of them, and where they could come in handy.
### Static Site Generators, what are they and what do I think of them?
Before I even get started here, there is this magnificently well-written article on the matter over at [davidwalsh.name](https://davidwalsh.name/introduction-static-site-generators) that I just had to put here. Nothing I write here could possibly beat that initial metaphor, even though the author may be a bit *too* optimistic about the whole static site business. This post is also partly inspired by the topics discussed here. Anyway, enough of that.  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A static Site Generator offers what the name suggests: a static site. "But what is a static site" you may ask. Well, a static site is a site that by itself does not provide any form of dynamic content, and instead provides a static set of pre-determined content. This means that they are *very* limited when it comes to real-time content such as updates, trackers, and things such as "trending topics", and so on. You cannot really have dynamically generated content that adjusts itself to your users to, for instance, display location-relevant content or track their reading habits to suggest articles. Granted, some of these issues can be band-aid fixed with javascript that adds dynamic content once the page has been fully loaded, but that invites a whole new set of issues that you have to somehow tackle (and at a certain point you will also have to ask yourself what the point is of having a static site if you're just going to manually force it to become dynamic anyway).  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Speaking of users, the ability to create user accounts that would allow users to interact with the site is more or less absent. And speaking of which, there is essentially no support for any kind of user input either. Even something "as simple as" allowing users to comment on posts or hosting some kind of form for whatever reason can provide challenges. Thankfully, there are workarounds for this such as Disqus that is used on this site.  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Well, this all doesn't sound so great. Thankfully for us, every coin has two sides. Due to the nature of being a static site that doesn't need to query 500 databases and processes 500,000 lines of whatever, they're generally rather quick. Simply put: less to load = quicker load. You can, in theory anyway, easily version control them through Github and have multiple people working on it, pushing and pulling as they see fit. They're also generally safer as there's no user interaction or tasty databases for hackers to persue, and the maintenance is generally less tedious due to the lack of scripts requiring up-to-date libraries and frameworks and what not. Speaking of which, a strictly static site should, in theory, work anywhere as it's just a collection of fixed HTML pages and you don't have to worry much about your users' choice of browser or other compatibility nightmares.
#### My opinion of Static Site Generators and their uses
Now we got to the fun part: what do I think of static site generators? Well, my first impression was "%/"#, that's convenient!" If we ignore, for a moment, the horrific experience that it was getting Jekyll and Docker working, the rest of getting this site up and running, as well as working on it, was an absolute delight. It's all *just there* and I do not need to worry much. Want a new post? Toss it in the `_posts` folder (yes, I changed posts to _posts). Need to upload an image? Toss it in the `assets` folder. And it's all just right there in Visual Studio Code, just a "git pull" away, and it all *just works*. It's beautiful. Granted, there's no user accounts or interfaces for you to post something on-the-go or from the actual site and instead you actually have to open it up, add it manually, and then re-generate the site, but I personally consider that to be an inconvenience at most. And yes, getting a hang of it all at the start was quite the hassle. Understanding the system behind the Gems, how minima worked and how it was edited, and most of all: figuring out how it was all connected in the end (the connection between the markdown files, the _layouts, and the _includes took several days to figure out). Other than that though... when it was all figured out the rest was a breeze. I especially like the whole includes-system where you can so easily keep the site uniform throughout. I would be lying though if I said I didn't bang my head against the wall a few times and I wish that I would have found more uses for javascript than I did, but I did gtt it all working in the end. Somewhat, anyway. In conclusion: I would definitely consider getting myself a static site if I ever found the need for a blog or somewhere to present my work.  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When it comes to the use of static sites, I would say that they are most suitable for websites that require little to no user interaction (duh), such as federal institutions, informational sites, or like this one, a random blog. You don't expect to go to, for instance, the site for the local police department and start a deep conversation on Narwhals for everyone to see. An informational website may raise questions but they don't need to be public and could be substituted with a contact e-mail address. As for blogs, the same applies even though the owner of a blog may be more tempted to have post-related comments and hey, there's solutions for that available. For free, I might add. I am sure that you can find even more uses for static sites as they are indeed very neat, but those were the most obvious examples off the top of my head.